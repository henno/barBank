openapi: 3.0.2
info:
  title: barBank
  version: 1.0.0
paths:
  /users:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postUsersRequest'
        required: true
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userObject'
          description: User successfully registered.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Invalid password:
                  value:
                    error: Invalid password
                Parameter is required:
                  value:
                    error: 'User validation failed: {param}: Path `{param}` is required.'
          description: Bad request
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Username already exists:
                  value:
                    error: Username already exists
          description: Username already exists
      summary: Registers a new user
  /sessions:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postSessionsRequest'
        required: true
      tags:
        - sessions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSessionsResponse'
          description: User logged in successfully
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Invalid username/password:
                  value:
                    error: Invalid username/password
          description: Invalid username/password
      summary: Logs the user in
    delete:
      tags:
        - sessions
      responses:
        '204':
          description: User logged out successfully
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Missing Authorization header:
                  value:
                    error: Missing Authorization header
                Invalid token:
                  value:
                    error: Invalid token
          description: Unauthorized
      security:
        -
          Token: []
      summary: Logs the user out
  /users/current:
    get:
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUsersCurrentResponse'
          description: Succesful request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Missing Authorization header:
                  value:
                    error: Missing Authorization header
                Invalid token:
                  value:
                    error: Invalid token
          description: Unauthorized
      security:
        -
          Token: []
      summary: Returns currently logged in user's data
  /transactions:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postTransactionsRequest'
        required: true
      tags:
        - transactions
      responses:
        '201':
          content:
            application/json: {}
          description: Transaction has been successfully queued for processing
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                invalidAmount:
                  value:
                    error: Invalid amount
                invalidAccountTo:
                  value:
                    error: Invalid accountTo
          description: Invalid amount
        '402':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                insufficientFunds:
                  value:
                    error: Insufficient funds
          description: Insufficient funds
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                forbidden:
                  value:
                    error: Forbidden
          description: The accountFrom does not belong to the user
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                accountNotFound:
                  value:
                    error: Account not found
          description: Account not found
      security:
        -
          Token: []
      summary: Accepts new transaction
  /transactions/b2b:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postTransactionsB2bRequest'
        required: true
      tags:
        - transactions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postTransactionsB2bResponse'
              examples:
                postTransactionsB2bResponseExample:
                  value:
                    receiverName: Jack Daniels
          description: Transfer accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Parsing JWT payload failed:
                  value:
                    error: 'Parsing JWT payload failed: reason here'
                The account sending the funds does not belong to a bank registered in Central Bank:
                  value:
                    error: >-
                      The account sending the funds does not belong to a bank registered
                      in Central Bank
                The jwksUrl of the bank is invalid:
                  value:
                    error: >-
                      Cannot verify your signature: The jwksUrl of your bank
                      (${bankFrom.jwksUrl}) is invalid: reason here
                Invalid signature:
                  value:
                    error: Invalid signature
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Account not found:
                  value:
                    error: Account not found
          description: Account not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                'Cannot verify your signature: The jwksUrl of your bank is missing':
                  value:
                    error: 'Cannot verify your signature: The jwksUrl of your bank is missing'
          description: 'Cannot verify your signature: The jwksUrl of your bank is missing'
        '502':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Central Bank error:
                  value:
                    error: 'Central Bank error: reason here'
          description: Central Bank error
      summary: Accepts new transaction from anoher bank
components:
  schemas:
    postUsersRequest:
      title: POST /users request
      description: ''
      required:
        - name
        - username
        - password
      type: object
      properties:
        name:
          description: User's full name
          type: string
        username:
          description: Desired username
          type: string
        password:
          format: password
          description: Desired password
          type: string
      example:
        name: Miki Hiir
        username: miki
        password: plutoonium
    userObject:
      title: user object
      description: ''
      type: object
      properties:
        accounts:
          description: Array of user's bank accounts
          type: array
          items:
            $ref: '#/components/schemas/account'
        password:
          type: string
        name:
          description: User's full name
          type: string
        username:
          type: string
        id:
          description: User's ID
          type: string
      example:
        id: 5f7739fedc144dc2b25cfa75
        name: Miki Hiir
        username: miki
        accounts:
          -
            name: Main
            balance: 100000
            currency: EUR
            number: abc633520f3596e174fd17832eefa508c0b
            id: 5f7739fedc144dc2b25cfa76
    errorResponse:
      title: error object
      description: ''
      type: object
      properties:
        error:
          type: string
      example:
        error: Error message.
    postSessionsRequest:
      title: POST /sessions request
      description: ''
      type: object
      properties:
        username:
          description: A valid username
          type: string
        password:
          description: The password associated with given username
          type: string
      example:
        username: miki
        password: plutoonium
    postSessionsResponse:
      title: POST /sessions response
      description: ''
      type: object
      properties:
        token:
          description: >-
            A session token which needs to be sent back to server in Authorization header with
            every request (Authorization: Bearer <token>)
          type: string
      example:
        token: 5f883c52cdb989473690cc95
    getUsersCurrentResponse:
      title: GET /users/current response
      description: ''
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        username:
          type: string
        accounts:
          description: Array of user's accounts
          type: array
          items:
            $ref: '#/components/schemas/account'
      example:
        id: 5f7ec5b3ef096607de0e89f3
        name: Foo
        username: user
        accounts:
          -
            name: Main
            balance: 100000
            currency: EUR
            number: 843eaf7076184bdb8b74faea17d1c3c3287
    account:
      title: account object
      description: ''
      type: object
      properties:
        name:
          type: string
        balance:
          type: integer
        currency:
          type: string
        number:
          type: string
      example:
        name: Main
        balance: 100000
        currency: EUR
        number: 843eaf7076184bdb8b74faea17d1c3c3287
    postTransactionsRequest:
      title: POST /transactions request
      description: ''
      type: object
      properties:
        accountFrom:
          description: Sender's bank account
          type: string
        accountTo:
          description: Receiver's bank account
          type: string
        amount:
          format: int32
          description: The sum
          type: integer
        explanation:
          description: Purpose of the transaction
          type: string
      example:
        accountFrom: 843d755ccba09ffbcbe97bef0c79e0644d3
        accountTo: BY000000001
        amount: 2
        explanation: Don’t go spend it all at once
    postTransactionsB2bResponse:
      description: ''
      required:
        - receiverName
      type: object
      properties:
        receiverName:
          description: The name of the person to whom the accountTo account belongs to
          type: string
      example:
        receiverName: Jack Daniels
    postTransactionsB2bRequest:
      title: Root Type for postTransactionsB2b
      description: ''
      type: object
      properties:
        jwt:
          description: >-
            A JSON Web Token, containing the following payload:

            {
                "accountFrom": "abc123",
                "accountTo": "xyz456",
                "currency": "USD",
                "amount": 2,
                "explanation": "My two cents",
                "senderName": "Donald Trump"
            }, signed by the sending bank with its private key of which the public counterpart is
            available at the bank's jwksUrl
          type: string
      example:
        jwt: >-
          base64EncodedHeaderContainingAlgorithmUsedToSignTheToken.base64EncodedPayloadPart.base64EncodedSignatureCalculatedWithPrivateKeyFromHeaderAndPayload
  securitySchemes:
    Token:
      scheme: bearer
      type: http
      description: A Bearer scheme
